buildscript {
    repositories {
        mavenLocal()
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = 'https://lss233.littleservice.cn/repositories/minecraft' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: version_patch

group = "${group_base_id}.${group_sub_id}"
archivesBaseName = archives_base_id
version = "${minecraft_version}-${version_major}.${version_minor}.${BUILD_NUMBER}-${version_phase}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version'))
println('JVM:  ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')')
println('Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mappings_channel, version: mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            // mixin
            property 'mixin.env.disableRefMap', 'true'

            // Necessary for VisualVM
            property 'com.sun.management.jmxremote', 'true'
            property 'com.sun.management.jmxremote.port', '9100'
            property 'com.sun.management.jmxremote.local.only', 'false'
            property 'com.sun.management.jmxremote.authenticate', 'false'
            property 'com.sun.management.jmxremote.ssl', 'false'

            mods {
                ctidydemo {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            // mixin
            property 'mixin.env.disableRefMap', 'true'

            // disable default GUI, use IDE console to enter commands instead
            args '-nogui'

            mods {
                ctidydemo {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            // mixin
            property 'mixin.env.disableRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modid, '--all', '--output', file('src/main/data/'), '--existing', file('src/main/resources/')

            mods {
                ctidydemo {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/main/data/' }

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
    maven {  // mixin
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
    }
    maven {  // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {  // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
//    maven {  // Because JEI has a ridiculous FTB dependency now
//        url = 'https://maven.latmod.com/'
//    }
    maven {  // AutoRegLib, Quark, patchouli, etc.
        name = "blamejared"
        url = "http://maven.blamejared.com/"
    }
    maven {  // curios
        name = "theillusivec4"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    jcenter()
    mavenCentral()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${forge_version}"

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // mixin
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8:processor'

    implementation fg.deobf("curse.maven:AppleSkin-248787:3358019")               // forge-1.16.x-2.0.0 since 2021/6/19

    compileOnly fg.deobf("mezz.jei:${jei_artifact_id}:${jei_version}:api")

    runtimeOnly fg.deobf("mezz.jei:${jei_artifact_id}:${jei_version}")
    runtimeOnly fg.deobf("curse.maven:JustEnoughCharacters-250702:3376190")       // 4.3.0 since 2021/7/4
    runtimeOnly fg.deobf("curse.maven:XaeroMinimap-263420:3375900")               // 21.12.5 since 2021/7/4
    runtimeOnly fg.deobf("curse.maven:XaeroWorldmap-317780:3375878")              // 1.14.5 since 2021/7/4

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": modid,
            "Specification-Vendor": author_name,
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": version,
            "Implementation-Vendor" : author_name,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

