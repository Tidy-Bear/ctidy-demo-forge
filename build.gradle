buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://lss233.littleservice.cn/repositories/minecraft' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'  // parchment mapping
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'  // parchment mapping
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: version_patch

group = "${group_base_id}.${group_sub_id}"
archivesBaseName = archives_base_id
version = "${minecraft_version}-${version_major}.${version_minor}.${BUILD_NUMBER}-${version_phase}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version'))
println('JVM:  ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')')
println('Arch: ' + System.getProperty('os.arch'))

println("System Proxies: ${System.getProperty('java.net.useSystemProxies')}")
println("Proxy HTTP: ${System.getProperty('http.proxyHost')}:${System.getProperty('http.proxyPort')}")
println("Proxy HTTPS: ${System.getProperty('https.proxyHost')}:${System.getProperty('https.proxyPort')}")
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // official   MCVersion  Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mappings_channel, version: mappings_version

    // an Srg named sources jar is made by default, uncomment this to disable.
    // makeObfSourceJar = false

    // With AccessTransformer (AT), some private fields or methods in minecraft code will be public after configuration.
    // uncomment this to enable AT in the project.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // log4j2 bug fix
            property 'log4j2.formatMsgNoLookups', 'true'

            // logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', "${modid}"

            // mixin
            // property 'mixin.env.disableRefMap', 'true'

            // Necessary for VisualVM
            property 'com.sun.management.jmxremote', 'true'
            property 'com.sun.management.jmxremote.port', '9100'
            property 'com.sun.management.jmxremote.local.only', 'false'
            property 'com.sun.management.jmxremote.authenticate', 'false'
            property 'com.sun.management.jmxremote.ssl', 'false'

            mods {
                ctidydemo {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'log4j2.formatMsgNoLookups', 'true'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', "${modid}"

            // mixin
            // property 'mixin.env.disableRefMap', 'true'

            // disable default GUI, use IDE console to enter commands instead
            args '-nogui'

            mods {
                ctidydemo {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run/gametest')

            property 'log4j2.formatMsgNoLookups', 'true'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', "${modid}"

            // mixin
            // property 'mixin.env.disableRefMap', 'true'

            mods {
                ctidydemo {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'log4j2.formatMsgNoLookups', 'true'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', "${modid}"

            // mixin
            // property 'mixin.env.disableRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modid, '--all', '--output', file('src/main/data/'), '--existing', file('src/main/resources/')

            mods {
                ctidydemo {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/main/data/' }

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
    maven {  // mixin
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name "Curse Maven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {  // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/mezz/jei/"
    }
    maven {  // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    mavenCentral()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${forge_version}"

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // mixin
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8:processor'

    compileOnly fg.deobf("mezz.jei:${jei_artifact_id}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:${jei_artifact_id}-forge-api:${jei_version}")

    compileOnly fg.deobf(fileTree(dir: 'libs', include: ['*.jar']))

    runtimeOnly fg.deobf("mezz.jei:${jei_artifact_id}-forge:${jei_version}")
    runtimeOnly fg.deobf("curse.maven:JustEnoughCharacters-250702:${jech_version}")
    runtimeOnly fg.deobf("curse.maven:Jade-324717:${jade_version}")
    runtimeOnly fg.deobf("curse.maven:AppleSkin-248787:${appleskin_version}")
    runtimeOnly fg.deobf("curse.maven:XaeroMinimap-263420:${xaerominimap_version}")
    runtimeOnly fg.deobf("curse.maven:XaeroWorldmap-317780:${xaeroworldmap_version}")

}

mixin {
    add sourceSets.main, 'mixins.ctidydemo.refmap.json'
    config 'mixins.ctidydemo.json'

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
    checks = true
    hotSwap = true

    extraMappings file("build/createMcpToSrg/output.tsrg")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": modid,
            "Specification-Vendor": author_name,
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" : author_name,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mixins.ctidedemo.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

